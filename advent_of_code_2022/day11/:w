{-# LANGUAGE OverloadedStrings #-}
module Main where

import Data.Attoparsec.Text
import Data.Text (Text)
import qualified Data.Text.IO as T
import Data.Vector (Vector)
import qualified Data.Vector as V
import Data.Word (Word64)

data Operator = Plus | Times deriving Show

data Monkey = Monkey
    { _items :: [Word64]
    , _operator :: !Operator
    , _operand :: Word64
    , _divBy :: {-# UNPACK #-} !Word64
    , _true :: {-# UNPACK #-} !Int
    , _false :: {-# UNPACK #-} !Int
    }
    deriving Show

readMonkeys :: Text -> Vector Monkey
readMonkeys = either (error "Bad Parse") V.fromList . parseOnly (m `sepBy1'` (endOfLine *> endOfLine))
    where
        m = Monkey <$> (header *> items) <*> (operator <*> operand) <*> divBy <*> true <*> false
        header = string "Monkey " *> decimal *> char ':' *> endOfLine
        items = skipSpace *> string "Starting items: " *> (decimal `sepBy1'` string ", ") <* endOfLine
        operator = skipSpace *> string "Operation: new = old " *> choice [Plus <$ string "+ ", Tiems <$ string "* "]
        operand = decimal <* endOfLine
        divBy = skipSpace *> string "Test: divisible by " *> decimal <* endOfLine
        true = skipSpace *> string "If true: throw to monkey " *> decimal <* endOfLine
        false = skipSpace *> string "If false: throw to monkey " *> decimal <* endOfLine



main :: IO ()
main = do
    monkeys <- readMonkeys <$> T.readFile "input.txt"
    print monkeys
