=======PAGE 1=======
===
Today's exercise was written by guest author Graham Enos, a PhD student in the
Applied Mathematics program at UNC Charlotte, with solution in Python rather
than Scheme.
===
In his 1979 paper "How to Share A Secret," available online at
http://portal.acm.org/citation.cfm?ide=359176, Adi Shamir (the S in RSA)
proposed a cryptographic scheme that allows $n$ people to share a secret number
$S$ in such a way that it takes at least $k$ of them pooling their resources to
reconstruct $S$. This $(k, n)$ threshold scheme uses modular arithmetic and
polynomials to give each of the n participants $\frac{1}{k}$ of the needed
information. For our discussion, we'll use a mix of Shamir's notation and that
found in chapter 12 of Menezes, van Oorschot, and Vanstone's "Handbook of
Applied Cryptography," available on their website at
http://www.cacr.math.uwaterloo.ca/hac/.

In his paper, Shamir describes how this scheme can be used to allow groups of 
$k$ people retrieve the secret number $S$ even if the other $n - k$ pieces of
information have been lost or destroyed. For another use case, suppose $S$ is a
2048-bit private RSA key that's been used to encrypt a message. Once $k$
participants get together and pool their information, they can find $S$ and
decode the message; however, at least $k$ of them must cooperate to retrieve
$S$; no smaller number of participants will do. Note that $S$ and $n$ can be
arbitrarily large integers, while $k <= n$ and $p > max(S, n)$. For instance,
$S$ could be the ASCII value of some secret letter, or a word encoded by taking
letters as digits in base 36. Now for the details.

Given a secret value $S$, the number of participants $n$, the threshold number
$k$, and some prime number $p$ bigger than both $n$ and $S$, we first construct
in secret a polynomial $y = q(x)$ of degree $k - 1$ (modulo our prime $p$) with
constant term $S$ by picking independent random integers between $1$ and $p-1$,
inclusive, for the coefficients. Next we choose $n$ unique random integers
between $1$ and $p - 1$, inclusive, and evaluate the polynomial at those n
points. Each of the $n$ participants is given an $(x, y)$ pair.

To reconstruct $S$ from $k$ pairs $(x, y)$, we use Lagrange Interpolation. In
general this technique can rebuild the entire polynomial $y = q(x)$, but since
$S = q(0)$, we only need to find $q(0)$ via the equation
\[
S =
\sum_{i = 1}^k \left[ y_i \prod_{1 \le j \le k, j \ne i} x_j (x_j - x_i)^{-1}
    \right] \mod p
\]
Note: the exponent $-1$ signifies taking the multiplicative inverse mod $p$,
that is, the integer $z$ such that $z \cdot (x_j - x_i) \equiv 1 (\mod p)$.

As an example, suppose $p = 23$, $S = 17$, and our polynomial $y = q(x)$ is
$17 + 4x + 13x^2$. Since this polynomial has degree two, we need at least three
points to reconstruct this polynomial. Suppose furthermore that to three of our
$n$ recipients we gave the points $(14, 22)$, $(2, 8)$, and $(21, 5)$. Lagrange
Interpolation could be used to recreate the whole polynomial, but we're only
interested in $S$, the constant term, which we retrieve via the following:
\[
\sum_{i = 1}^3 \left[ y_i \prod_{1 \le j \le k, j \ne i} x_j (x_j - x_i)^{-1}
    \right] (\mod 23)
=   [22 \cdot 2(2 - 14)^{-1} \cdot 21(21 - 14)^{-1}] +
    [8 \cdot 14(14 - 2)^{-1} \cdot 21(21 - 2)^{-1}] +
    [5 \cdot 14(14 - 21)^{-1} \cdot 2(2 - 21)^{-1}] (\mod 23)
=   [22 \cdot 2 \cdot 11^{-1} \cdot 21 \cdot 7^{-1}] +
    [8 \cdot 14 \cdot 12^{-1} \cdot 21 \cdot 19^{-1}] +
    [5 \cdot 14 \cdot 16^{-1} \cdot 21 \cdot 4^{-1}]
=   [22 \cdot 2 \cdot 21 \cdot 21 \cdot 10] +
    [8 \cdot 14 \cdot 2 \cdot 23 \cdot 17] +
    [5 \cdot 14 \cdot 13 \cdot 21 \cdot 6] (\mod 23)
=   194040 + 87584 + 114660 (\mod 23)
=   396284 (\mod 23)
=   17
\]

The beauty of this scheme is twofold. First, it is rather simple and elegant;
the majority of the actual code used to implement the scheme takes less than 15
lines in Python. Second, it has information theoretic security. That is, the
security of the scheme relies entirely upon the fact that at least $k$ points
are needed to reconstruct a degree $k - 1$ polynomial; nothing less than $k$
points will do. This means its security is based on something being impossible,
as opposed to something being believed to be difficult, but not yet proven to be
so (e.g. factoring the product of two large primes). This scheme also enjoys
other useful properties; see the above references for more.

Your task is to write functions that perform both portions of Shamir's $(k, n)$
threshold scheme. When you are finished, you are welcome to read or run a
suggested solution, or to post your own solution or discuss the exercise in the
comments below.

=======PAGE 2=======
We first import two functions from the <code>random</code> module:
<code>
from random import randrange, sample
</code>
These will furnish us with the random integers we require; <code>randrange(1,
p)</code> returns a uniformly distributed random integer in the half-open
interval $[1, p)$, while <code>sample(xrange(1, p), n)</code> will select $n$
of the integers in $[1, p)$ with no repeats.

We build our polynomial via a modified version of Horner's Method (which we saw
in the second exercise on the Look and Say sequence):
<code>
def horner_mod(coeffs, mod):
    return lambda x: (x,
        reduce(lambda a, b: a * x + b % mod, reversed(coeffs), 0) % mod)
</code>
This function, given a list of coefficients and a modulus, returns the function
that maps $x$ to the pair $(x, y)$ where $y$ is the result of running $x$
through the polynomial modulo <code>mod</code> whose coefficients are listed in
<code>coeffs</code>.

From there, Shamir's Threshold scheme involves building our list of coefficients
(the first---really zeroth---of which is the secret $S$), then evaluating the
polynomial we've built $n$ times and returning the $(x, y)$ pairs:
<code>
def shamir_threshold(S, k, n, p):
    coeffs = [S]
    coeffs.extend(randrange(1, p) for _ in xrange(k - 1))
    return map(horner_mod(coeffs, p), sample(xrange(1, p), n))
</code>

Finally, we us Lagrange Interpolation to find the constant term $S$ given a list
of $k$ or more $(x, y)$ pairs. For good measure, we first check that we have
enough pairs, then use just the first $k$ to find $S$:
<code>
def interp_const(xy_pairs, k, p):
    assert len(xy_pairs) >= k, "Not enough points for interpolation"
    x = lambda i: xy_pairs[i][0]
    y = lambda i: xy_pairs[i][1]
    return sum(y(i) * prod(x(j) * mod_inv(x(j) - x(i), p) % p for j in xrange(k)
        if j != i) for i in xrange(k)) % p
</code>
We first define inline functions that allow us to pick out the $i$th $x$ and $y$
values from our list of pairs, then use them to write the equation for $S$ given
on the previous page.

As for testing, let's encode the words "PRAXIS" as an integer by considering all
digits and letters as integers in base 36. We'll take $p$ to be the next prime
after $S$ (found by different means; see The Next Prime exercise)---this choice
of $p$ is arbitrary, it just needs to be bigger than $S$. To keep things
manageable, let's take $n$ to be 20 and $k$ to be 5, so we're constructing a
degree 4 polynomial and we'll hand out 20 $(x, y)$ pairs.
<code>
if __name__ == "__main__":
    from pprint import pprint                   # Pretty printing
    S = int("PRAXIS", 36); print S              # Prints 1557514036
    n, k, p = 20, 5, 1557514061                 # p is the next prime after S
    xy_pairs = shamir_threshold(S, k, n, p)
    pprint(xy_pairs)                            # Prints all 20 (x, y) pairs
    print interp_const(pairs, k, p)             # Should print 1557514036
</code>
which gives the output (on one running; pairs depends on the random polynomial
created)
<code>
1557514036
[(697286162, 445615394L),
 (471866046, 757728985L),
 (112045393, 1132162792L),
 (397324764, 486286231L),
 (135120894, 1142009194L),
 (508637994, 1556915744L),
 (488738532, 834401917L),
 (1369874096, 1345716686L),
 (91597754, 487556032L),
 (970187759, 341284274L),
 (1102805729, 224871713L),
 (245100902, 1306749801L),
 (413372256, 568733054L),
 (1218343037, 63534734L),
 (442535975, 1060000953L),
 (1173207231, 400308586L),
 (515043844, 141960722L),
 (1162691976, 374990038L),
 (73252341, 785232686L),
 (934671161, 486917357L)]
1557514036
</code>
(Ignore the L on the end of the numbers on the right; this just signifies that
Python used long integer arithmetic to find them. Python 3.x, the newer
iteration of Python, removes the distinction between integers and long
integers.)

Our solution used <code>mod_inv</code> from a comment on the Modular Arithmetic
exercise; we also defined the function <code>prod</code>, analogous to
<code>sum</code>. You can see and run the full program on codepad at
http://codepad.org/NvYVdZFT
