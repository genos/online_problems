(define (u n p q)
  (cond ((<= n 0) 1)
        ((= n 1) p)
        (else (let ((k (quotient n 2)))
                (if (odd? n)
                  (- (* (u (+ k 1) p q)
                        (v k p q))
                     (expt q k))
                  (* (u k p q) (v k p q)))))))

(define (v n p q)
  (cond ((<= n 0) 2)
        ((= n 1) p)
        (else (let ((k (quotient n 2)))
                (if (odd? n)
                  (- (* (v (+ k 1) p q)
                        (v k p q))
                     (* p (expt  q k)))
                  (- (expt (v k p q) 2)
                     (* 2 (expt q k))))))))
