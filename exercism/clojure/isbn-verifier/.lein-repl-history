(keep-indexed #(== \X %) (into '() "359821508X"))
(keep-indexed #(== \X %1) (into '() "359821508X"))
(keep-indexed #(when (== \X %1) [%1 %2]) (into '() "359821508X"))
(keep-indexed #(when (== \X %2) [%1 %2]) (into '() "359821508X"))
(keep-indexed #(when (== "X" %2) [%1 %2]) (into '() "359821508X"))
(keep-indexed #(when (= "X" %2) [%1 %2]) (into '() "359821508X"))
(keep-indexed #(when (= \X %2) [%1 %2]) (into '() "359821508X"))
(keep-indexed #(if (= \X %2) [%1 %2]) (into '() "359821508X"))
(keep-indexed #(if (= \X %2) [%1 %2]) (into '() "X359821508X"))
(keep-indexed #(if (= \X %2) [%1 %2]) (into '() "X359821508"))
(keep-indexed #(if (= \X %2) [%1 %2]) (into [] "359821508"))
(keep-indexed #(if (= \X %2) [%1 %2]) (into [] "359821508X"))
(first ([9 \X]))
(first '([9 \X]))
(first (first '([9 \X])))
(require '[isbn-verifier :as iv])
(iv/x-only-last? "359821507X")
(iv/x-only-last? "3598215079")
(nil? [])
(nil? '())
(emptyl? '())
(empty? '())
(empty? [])
(require '[isbn-verifier :as iv] :reload )
(iv/x-only-last? "3598215079")
(iv/x-only-last? "359821507X")
(iv/x-only-last? "X59821507X")
(iv/x-only-last? "X598215079")
(isbn? "3598215088")
(iv/isbn? "3598215088")
(require '[isbn-verifier :as iv] :reload )
(def x "3-598-21508-8")
(iv/clean x)
(re-seqf #"[0-9]X" x)
(re-seq #"[0-9]X" x)
x
(re-seq #"[0-9X]" x)
(require '[isbn-verifier :as iv] :reload )
(iv/clean x)
(iv/length-ok? *1)
(iv/x-only-last? *2)
(def c (iv/clean x))
c
(zipmap "0123456789X" (fn [i x] i))
(zipmap (fn [i x] i)  "0123456789X")
(map-indexed (fn [i x] i)  "0123456789X")
(map-indexed (fn [i _] i)  "0123456789X")
(map-indexed (fn [i x] [x i])  "0123456789X")
(hash-map (map-indexed (fn [i x] [x i])  "0123456789X"))
(apply hash-map (map-indexed (fn [i x] [x i])  "0123456789X"))
(concath-map (map-indexed (fn [i x] [x i])  "0123456789X"))
(concat (map-indexed (fn [i x] [x i])  "0123456789X"))
(concat (concat (map-indexed (fn [i x] [x i])  "0123456789X")))
(apply concat (map-indexed (fn [i x] [x i])  "0123456789X"))
(hash-map (apply concat (map-indexed (fn [i x] [x i])  "0123456789X")))
(apply hash-map (apply concat (map-indexed (fn [i x] [x i])  "0123456789X")))
(defn to-int [c] ((apply hash-map (apply concat (map-indexed (fn [i x] [x i])  "0123456789X"))) c)
)
(to-int \2)
(to-int \X)
(to-int \&)
(require '[isbn-verifier :as iv] :reload )
(iv/int-map
\X)
iv/int-map
y
x
c
(reverse c)
(map-indexed (fn [i c] (i (iv/int-map c))) (reverse c))
(map-indexed (fn [i c] [i (iv/int-map c)]) (reverse c))
(map-indexed (fn [i x] [i (iv/int-map x)]) (reverse c))
(reverse c)
(re-seq #"[0-9X]" s)
(re-seq #"[0-9X]" x)
(concat (re-seq #"[0-9X]" x))
(apply str (re-seq #"[0-9X]" x))
(require '[isbn-verifier :as iv] :reload )
(map-indexed (fn [i x] [i (iv/int-map x)]) (reverse c))
c
x
(def c (iv/clean x))
c
(map-indexed (fn [i x] [i (iv/int-map x)]) (reverse c))
c
(map-indexed (fn [i x] [i (iv/int-map x)]) (reverse (tail c)))
(map-indexed (fn [i x] [i (iv/int-map x)]) (drop 1 (reverse  c)))
(last c)
(require '[isbn_verifier :as iv] :refresh)
(require '[isbn_verifier :as iv] :reloadh)
(require '[isbn_verifier :as iv] :reload)
(require '[isbn-verifier :as iv] :reload)
(def s "3-598-21508-8")
(def c (iv/clean s))
c
(iv/polynomial c)
(drop 1 (reverse c))
(map-indexed (fn [i x] (* i (int-map x))) (drop 1 (reverse c)))
(map-indexed (fn [i x] (* i (iv/int-map x))) (drop 1 (reverse c)))
(apply + (map-indexed (fn [i x] (* i (iv/int-map x))) (drop 1 (reverse c))))
(mod (apply + (map-indexed (fn [i x] (* i (iv/int-map x))) (drop 1 (reverse c)))) 11)
(require '[isbn-verifier :as iv] :reload)
(def s "#-598-21507-X")
(def s "3-598-21507-X")
(def c (iv/clean s))
c
(iv/length-ok? c)
(iv/x-only-last? c)
(iv/polynomial (drop 1 (reverse c)))
(require '[isbn-verifier :as iv] :reload)
(iv/polynomial c)
c
(reverse c)
(map-indexed (fn [i x] [i (int-map x)]) (reverse c))
(map-indexed (fn [i x] [i (iv/int-map x)]) (reverse c))
(map-indexed (fn [i x] [i (iv/int-map x)]) c)
(reverse c)
(map-indexed (fn [i x] [(+ 1 i) (iv/int-map x)]) (reverse c))
(apply + (map-indexed (fn [i x] (*(+ 1 i) (iv/int-map x))) (reverse c))
)
(mod *1 11)
