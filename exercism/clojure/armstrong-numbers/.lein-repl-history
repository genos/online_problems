(quot 10 3)
(quot 3 10)
(rem 3 10)
(doc quot)
(doc rem)
(doc mod)
(doc /)
(/ 1 2)
(conj 1 [1 2 3 4])
(digits
(defn digits [n]
  (if
    (< n 10)
    [n]
    (let [a (quot n 10)
          b (rem n 10)
          ds (digits b)]
      (conj ds a))))
(defn digits [n]
  (if
    (< n 10)
    [n]
    (let [a (quot n 10)
          b (rem n 10)
          ds (digits b)]
      (conj ds a))))
)
(defn digits [n]
  (if
    (< n 10)
    [n]
    (let [a (quot n 10)
          b (rem n 10)
          ds (digits b)]
      (conj ds a))))
(digits 5)
(digits 10)
(digits 1234)
(digits 123)
(digits 12)
(defn digits [n]
  (if
    (< n 10)
    [n]
    (let [a (quot n 10)
          b (rem n 10)
          ds (digits a)]
      (conj ds b))))
(digits 1234)
(digits 5)
(= 5 (reduce +' (map #(Math/pow % 1) [5])))
(defn armstrong? [n]
  {:pre [(pos? n)]}
  (let [ds (digits n)
        len (count ds)]
    (= n (reduce + (map #(Math/pow % len) ds)))))
(armstrong? 5)
(digits 5)
(len (count %))
(count %)
(count *)
(count *1)
(reduce + (map #(Math/pow % 1) [5]))
(reduce + (map #(BigInteger/ % 1) [5]))
(BigInteger/powerCache 1 10)
(bigint 5)
(.divideAndRemainder % 10)
(.divideAndRemainder *1 10)
(.divide *1 10)
(/ *1 10)
*1
*3
(divide *1 10)
(quote *1 10)
(quot *1 10)
(rem *1 10)
(rem *3 10)
((juxt quot rem) 1234 10)
(documenation conj)
(doc conj)
(BigInteger. 10)
(BigInteger. "10")
(.pow (BigInteger. "10") 10)

(defn digits [n]
  (if (< n 10)
    [n]
    (let [[a b] ((juxt quot rem) n 10)]
      (conj (digits b) a))))
(defn armstrong? [n]
  {:pre [(pos? n)]}
  (let [ds (digits n)
        len (count ds)]
    (= n (reduce + (map #(.pow (BigInteger. (str %)) len) ds)))))
(digits 1234)
(defn digits [n]
  (if (< n 10)
    [n]
    (let [[a b] ((juxt quot rem) n 10)]
      (conj (digits a) b))))
(digits 1234)
(defn digits [n]
  (if (< n 10)
    [n]
    (let [[a b] ((juxt rem quot) n 10)]
      (conj (digits b) a))))
(digits 1234)
(bigint 10)
((juxt rem quot) 1234 10)
